name: 1-Create-Storage-Premium
on: workflow_dispatch

jobs:
  build:
    name: 1-Create-Storage-Premium
    runs-on: windows-2022
    steps:
    # Authentication: log on to Azure with the AZURE_AVD_SP secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_AVD_SP}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          $Tags = @{"Environment"="PRD"}
          $storageAccountName = "ucorpavdprem"
          $ResourceGroup = "Ucorp-Storage-RG"
          $accountType = "Standard_LRS" #Premium_ZRS
          $kind = "StorageV2" #FileStorage

          # Create the resource group if needed
          try {
              Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
              } catch {
              New-AzResourceGroup -Name $ResourceGroup -Location "westeurope" -Tag $Tags
              }

          ## Create a Template Parameter Object (hashtable)
          $objTemplateParameter = @{
          "storageAccountName" = "$storageAccountName";
          "location" = "westeurope";
          "accessTier" = "Hot";
          "minimumTlsVersion" = "TLS1_2";
          "supportsHttpsTrafficOnly" = $true;
          "allowBlobPublicAccess" = $false;
          "allowSharedKeyAccess" = $true;
          "networkAclsBypass" = "AzureServices";
          "networkAclsDefaultAction" = "Allow";
          "accountType" = "$accountType";
          "kind" = "$kind";
          "isShareSoftDeleteEnabled" = $true;
          "shareSoftDeleteRetentionDays" = 90;
          }

          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\1-ARM-Create-Storage-Account.json")
              
          # storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/iuenk/AVD/main/ARMTemplates/1-ARM-Create-Storage-Account.json"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing

          # ARM Template file
          ## Create premium storage account for FSlogix
          New-AzResourceGroupDeployment -ResourceGroupName $ResourceGroup -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -Tag $Tags -Verbose

          $runState = ""
          $condition = ($runState -eq "Succeeded")
            while (!$condition){
            if ($lastrunState -ne $runState){
              write-host $ResourceGroup "is" $runState "(waiting for state change)"
            }
              $lastrunState = $runState
              Start-Sleep -Seconds 30
              $runState = (Get-AzResourceGroup -Name $ResourceGroup -ErrorAction SilentlyContinue).ProvisioningState
              $condition = ($runState -eq "Succeeded")       
            }

          Write-host $ResourceGroup "is" $runState
          $storageKey = (Get-AzstorageAccountKey -ResourceGroupName $ResourceGroup -Name $storageAccountName).Value[0]
          $storageContext = New-AzstorageContext -storageAccountName $storageAccountName -storageAccountKey $storageKey

          $fslogixOffice = "fslogixoffice"
          $fslogixProfiles = "fslogixprofiles"
          New-AzstorageShare -Name $fslogixOffice -Context $storageContext
          New-AzstorageShare -Name $fslogixProfiles -Context $storageContext

          # New-AzRmStorageShare -ResourceGroupName $ResourceGroup -StorageAccountName $storageAccountName -Name $fslogixOffice -QuotaGiB 100
          # New-AzRmStorageShare -ResourceGroupName $ResourceGroup -StorageAccountName $storageAccountName -Name $fslogixProfiles -QuotaGiB 100

        azPSVersion: 'latest'